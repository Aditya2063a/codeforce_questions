// #include <bits/stdc++.h>
// using namespace std;

// int solve(vector<int>& vec, int n){
//     vector<int> makeNeg(n), makePos(n);

//     makeNeg[0] = (vec[0] >= 0) ? 1 : 0;
//     for(int i = 1; i < n; ++i){
//         makeNeg[i] = makeNeg[i-1] + (vec[i] >= 0 ? 1 : 0);
//     }

//     makePos[n-1] = (vec[n-1] <= 0) ? 1 : 0;
//     for(int i = n-2; i >= 0; --i){
//         makePos[i] = makePos[i+1] + (vec[i] <= 0 ? 1 : 0);
//     }

//     int result = INT_MAX;
//     for(int i = 0; i < n - 1; ++i){
//         result = min(result, makeNeg[i] + makePos[i+1]);
//     }

//     return result;
// }

// int main(){
//     ios_base::sync_with_stdio(false);
//     cin.tie(0);

//     int n;
//     cin >> n;
//     vector<int> vec(n);
//     for(int i = 0; i < n; i++) cin >> vec[i];

//     cout << solve(vec, n) << "\n";
//     return 0;
// }

#include <bits/stdc++.h>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int n;
    cin >> n;
    vector<int> t(n);
    for (int i = 0; i < n; ++i) cin >> t[i];

    // Precompute suffix positive changes from the end
    vector<int> suffixPos(n);
    suffixPos[n - 1] = (t[n - 1] <= 0) ? 1 : 0;
    for (int i = n - 2; i >= 0; --i) {
        suffixPos[i] = suffixPos[i + 1] + (t[i] <= 0 ? 1 : 0);
    }

    int result = INT_MAX;
    int negSoFar = (t[0] >= 0) ? 1 : 0;

    for (int i = 1; i < n; ++i) {
        // Try split between [0..i-1] and [i..n-1]
        result = min(result, negSoFar + suffixPos[i]);
        negSoFar += (t[i] >= 0 ? 1 : 0);
    }

    cout << result << "\n";
    return 0;
}
